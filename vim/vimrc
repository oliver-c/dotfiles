set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle

" Use Vundle to manage plugins
call vundle#rc()

Bundle 'gmarik/vundle'
Bundle 'vim-scripts/CSApprox'
Bundle 'Pychimp/vim-luna'
Bundle 'bling/vim-airline'
Bundle 'Rip-Rip/clang_complete'
Bundle 'Shougo/neocomplcache'
Bundle 'kien/ctrlp.vim'

set nowrap

" Use 3 spaces by default for indentation
set expandtab
set tabstop=3
set shiftwidth=3

set backspace=2

set autoindent smartindent
set smarttab

" Use 2 spaces for ruby code and html
au FileType ruby,eruby setl tabstop=2 shiftwidth=2
au FileType html setl tabstop=2 shiftwidth=2

" Paragraph formatting options
au FileType plaintex,tex setl textwidth=78 formatoptions=at

set vb t_vb=

set laststatus=2
set encoding=utf-8
set noshowmode

set background=dark
colorscheme luna

set cursorline

" airline settings
let g:airline#extensions#tabline#enabled = 1
let g:airline_left_sep = ''
let g:airline_right_sep = ''

" GUI settings
if has("gui_running")
   set guioptions-=m
   set guioptions-=T
   set guioptions-=r

   " Get rid of blinking cursor
   set gcr=a:blinkon0
endif

" Global local configuration
if filereadable(expand("~/.vimrc.local"))
   so ~/.vimrc.local
endif

" Load custom vimrc if it exists in the directory
" vim was opened in
if filereadable("vimrc.custom")
   so vimrc.custom
endif

" Remove delay in exiting insert mode when
" pressing <ESC>
set noesckeys

" Set system clipboard as default
if has("unix") && substitute(system("uname"), "\n", "", "") == "Linux"
   " Set X clipboard as default
   set clipboard=unnamedplus
else
   set clipboard=unnamed
endif

" neocomplcache settings
let g:neocomplcache_enable_at_startup = 1

if !exists('g:neocomplcache_force_omni_patterns')
  let g:neocomplcache_force_omni_patterns = {}
endif

let g:neocomplcache_force_overwrite_completefunc = 1
let g:neocomplcache_force_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
let g:neocomplcache_force_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplcache_force_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
let g:neocomplcache_force_omni_patterns.objc = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplcache_force_omni_patterns.objcpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

let g:clang_complete_auto = 0
let g:clang_auto_select = 0

" Ruby completion settings
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1

" clang_complete settings
let g:clang_use_library = 1

" look for cscope dbs by going to parent directories
function! LoadCscope()
  let db = findfile("cscope.out", ".;")
  if (!empty(db))
    let path = strpart(db, 0, match(db, "/cscope.out$"))
    set nocscopeverbose " suppress 'duplicate connection' error
    exe "cs add " . db . " " . path
    set cscopeverbose
  endif
endfunction
au BufEnter * call LoadCscope()

syntax on
filetype on
filetype plugin on
filetype indent on
